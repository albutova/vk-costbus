{"version":3,"sources":["panels/Home.js","App.js","sw.js","index.js"],"names":["Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","message","currentTime","Date","getHours","getMinutes","updateMessage","bind","assertThisInitialized","setState","react_default","a","createElement","vkui","type","alignment","placeHolder","defaultValue","size","level","React","Component","App","props","go","e","activePanel","currentTarget","dataset","to","fetchedUser","showCost","_this2","connect","subscribe","detail","data","console","log","send","panels_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById"],"mappings":"yNA8DgBA,sBA7BZ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACZC,GAAI,OACDC,QAAS,0BACTC,aAAc,IAAIC,MAAMC,WAAa,KAAO,IAAID,MAAME,cAE1Db,EAAKc,cAAgBd,EAAKc,cAAcC,KAAnBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAPZA,+EAUTG,KAAKc,SAAS,CACVR,QAAS,qEAIZ,OACES,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOb,GAAIL,KAAKI,MAAMC,IACvBU,EAAAC,EAAAC,cAACC,EAAA,WAAD,KACFH,EAAAC,EAAAC,cAACC,EAAA,gBAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOC,KAAK,OAAOC,UAAU,SAASC,YAAY,8MAClDN,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOC,KAAK,OAAOE,YAAY,iCAAQC,aAActB,KAAKI,MAAMG,YAAaa,UAAU,WAC7FL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQK,KAAK,KAAKC,MAAM,aAAxB,6HAvBeC,IAAMC,YCkBVC,cAzCd,SAAAA,EAAYC,GAAO,IAAA/B,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IAClB9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAM4B,KA0BPC,GAAK,SAACC,GACLjC,EAAKiB,SAAS,CAAEiB,YAAaD,EAAEE,cAAcC,QAAQC,MAzBvC,IAAI1B,KAHA,OAKlBX,EAAKO,MAAQ,CACZ2B,YAAa,OACbI,YAAa,MAIdtC,EAAKuC,SAAWvC,EAAKuC,SAASxB,KAAdd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAXEA,mFAcC,IAAAwC,EAAArC,KACnBsC,IAAQC,UAAU,SAACT,GAClB,OAAQA,EAAEU,OAAOrB,MAChB,IAAK,4BACJkB,EAAKvB,SAAS,CAAEqB,YAAaL,EAAEU,OAAOC,OACtC,MACD,QACCC,QAAQC,IAAIb,EAAEU,OAAOrB,SAGxBmB,IAAQM,KAAK,sBAAuB,qCASpC,OACC7B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMa,YAAa/B,KAAKI,MAAM2B,aAC7BhB,EAAAC,EAAAC,cAAC4B,EAAD,CAAMxC,GAAG,iBApCKoB,IAAMC,WCyDJoB,QAAqC,cAA7BC,OAAOC,SAASC,UAEd,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DC3DhCZ,IAAQM,KAAK,eAAgB,IAQ7BO,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.05b68c32.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Panel, ListItem, Button, Group, Div, PanelHeader, FormLayout, FormLayoutGroup, Input, InfoRow } from '@vkontakte/vkui';\r\n\r\n\r\n// const Home = ({ id, go, currentTime, cost, showCost }) => (\r\n// \t<Panel id={id}>\r\n// \t\t<FormLayout>\r\n// \t      <FormLayoutGroup>\r\n// \t        <Input type=\"text\" alignment=\"center\" placeHolder=\"Номер маршрутки/автобуса/троллейбуса\" />\r\n// \t        <Input type=\"text\" placeHolder=\"Время\" defaultValue={currentTime} alignment=\"center\" />\r\n// \t\t\t<Button size=\"xl\" level=\"secondary\">Сколько стоит проезд?</Button>\r\n// \t\t\t<InfoRow>\r\n//               {cost}\r\n//             </InfoRow>\r\n// \t      </FormLayoutGroup>\r\n// \t    </FormLayout>\r\n// \t</Panel>\r\n// );\r\n\r\n// Home.propTypes = {\r\n// \tid: PropTypes.string.isRequired,\r\n// \tgo: PropTypes.func.isRequired,\r\n// \tcurrentTime: PropTypes.string.isRequired,\r\n// \tcost: PropTypes.string.isRequired,\r\n// \tshowCost: PropTypes.func.isRequired\r\n// };\r\n\r\n// export default Home;\r\n\r\n\r\nclass Home extends React.Component {  \r\n      \r\n    constructor(){  \r\n        super();  \r\n        this.state = {  \r\n        \tid: \"home\",\r\n            message: \"my friend (from state)!\",\r\n            currentTime: (new Date).getHours() + \":\" + (new Date).getMinutes()\r\n        };  \r\n        this.updateMessage = this.updateMessage.bind(this);  \r\n    }\r\n    updateMessage() {  \r\n        this.setState({  \r\n            message: \"my friend (from changed state)!\"  \r\n        });  \r\n    }\r\n    render() {  \r\n         return (  \r\n           <Panel id={this.state.id}>\r\n\t         <FormLayout>\r\n\t\t      <FormLayoutGroup>\r\n\t\t        <Input type=\"text\" alignment=\"center\" placeHolder=\"Номер маршрутки/автобуса/троллейбуса\" />\r\n\t\t        <Input type=\"text\" placeHolder=\"Время\" defaultValue={this.state.currentTime} alignment=\"center\" />\r\n\t\t\t\t<Button size=\"xl\" level=\"secondary\">Сколько стоит проезд?</Button>\r\n\t\t      </FormLayoutGroup>\r\n\t\t    </FormLayout>\r\n           </Panel> \r\n        )  \r\n    }  \r\n}\r\n\r\n export default Home;","import React from 'react';\r\nimport connect from '@vkontakte/vkui-connect';\r\nimport { View } from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nimport Home from './panels/Home';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tvar curDate = new Date(); \r\n\r\n\t\tthis.state = {\r\n\t\t\tactivePanel: 'home',\r\n\t\t\tfetchedUser: null\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\tthis.showCost = this.showCost.bind(this)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconnect.subscribe((e) => {\r\n\t\t\tswitch (e.detail.type) {\r\n\t\t\t\tcase 'VKWebAppGetUserInfoResult':\r\n\t\t\t\t\tthis.setState({ fetchedUser: e.detail.data });\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log(e.detail.type);\r\n\t\t\t}\r\n\t\t});\r\n\t\tconnect.send('VKWebAppGetUserInfo', {});\r\n\t}\r\n\r\n\tgo = (e) => {\r\n\t\tthis.setState({ activePanel: e.currentTarget.dataset.to })\r\n\t};\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<View activePanel={this.state.activePanel}>\r\n\t\t\t\t<Home id=\"home\"/>\r\n\t\t\t</View>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import 'core-js/es6/map';\r\nimport 'core-js/es6/set';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vkui-connect';\r\nimport App from './App';\r\nimport registerServiceWorker from './sw';\r\n\r\n// Init VK App\r\nconnect.send('VKWebAppInit', {});\r\n\r\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\r\n// расскомментируйте строку с registerServiceWorker();\r\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\r\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT \r\n// registerServiceWorker();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}